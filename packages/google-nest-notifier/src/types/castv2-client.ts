/** Declaration file generated by dts-gen */
import { EventEmitter } from 'events'

export interface Application {
  // constructor(client: any, session: any)

  close(): void
}

export interface Client extends EventEmitter {
  // constructor()

  close(): void

  connect(options: any, callback: any): void

  getAppAvailability(appId: any, callback: any): any

  getSessions(callback: any): void

  getStatus(callback: any): void

  getVolume(callback: any): void

  join(session: any, Application: any, callback: any): void

  launch(Application: any, callback: any): any

  setVolume(volume: any, callback: any): void

  stop(application: any, callback: any): void
}

export interface ConnectionController {
  // constructor(client: any, sourceId: any, destinationId: any)

  connect(): void

  disconnect(): void
}

export interface Controller {
  // constructor(
  //   client: any,
  //   sourceId: any,
  //   destinationId: any,
  //   namespace: any,
  //   encoding: any
  // )

  close(): void

  send(data: any): void
}

export interface DefaultMediaReceiver {
  // constructor(client: any, session: any, ...args: any[])

  getStatus(callback: any, ...args: any[]): void

  load(media: any, options: any, callback: any, ...args: any[]): void

  pause(callback: any, ...args: any[]): void

  play(callback: any, ...args: any[]): void

  queueInsert(items: any, options: any, callback: any, ...args: any[]): void

  queueLoad(items: any, options: any, callback: any, ...args: any[]): void

  queueRemove(itemIds: any, options: any, callback: any, ...args: any[]): void

  queueReorder(itemIds: any, options: any, callback: any, ...args: any[]): void

  queueUpdate(items: any, callback: any, ...args: any[]): void

  seek(currentTime: any, callback: any, ...args: any[]): void

  stop(callback: any, ...args: any[]): void

  // static APP_ID: string
}

export interface HeartbeatController {
  // constructor(client: any, sourceId: any, destinationId: any)

  ping(): void

  start(intervalValue: any): void

  stop(): void
}

export interface MediaController {
  // constructor(client: any, sourceId: any, destinationId: any)

  getStatus(callback: any): any

  load(media: any, options: any, callback: any): any

  pause(callback: any): void

  play(callback: any): void

  queueInsert(items: any, options: any, callback: any): void

  queueLoad(items: any, options: any, callback: any): any

  queueRemove(itemIds: any, options: any, callback: any): void

  queueReorder(itemIds: any, options: any, callback: any): void

  queueUpdate(items: any, options: any, callback: any): void

  seek(currentTime: any, callback: any): void

  sessionRequest(data: any, callback: any): any

  stop(callback: any): void
}

export interface PlatformSender {
  // constructor()

  close(): void

  connect(options: any, callback: any): void

  getAppAvailability(appId: any, callback: any): any

  getSessions(callback: any): void

  getStatus(callback: any): void

  getVolume(callback: any): void

  join(session: any, Application: any, callback: any): void

  launch(Application: any, callback: any): any

  setVolume(volume: any, callback: any): void

  stop(application: any, callback: any): void
}

export interface ReceiverController {
  // constructor(client: any, sourceId: any, destinationId: any)

  getAppAvailability(appId: any, callback: any): any

  getSessions(callback: any): any

  getStatus(callback: any): any

  getVolume(callback: any): any

  launch(appId: any, callback: any): any

  setVolume(options: any, callback: any): any

  stop(sessionId: any, callback: any): any
}

export interface RequestResponseController {
  // constructor(client: any, sourceId: any, destinationId: any, namespace: any)

  request(data: any, callback: any): any
}

export type JsonController = (
  client: any,
  sourceId: any,
  destinationId: any,
  namespace: any,
) => void
